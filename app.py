import pandas as pd
import matplotlib.pyplot as plt
import sklearn.ensemble as ske
from sklearn.feature_selection import SelectFromModel
import sklearn.tree as tree
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC 
from sklearn import svm
import xlwt


n_data=41323;
data = pd.read_csv('./data/data.txt', sep='|')
legit_binaries = data[0:n_data].drop(['legitimate'], axis=1)
malicious_binaries = data[n_data::].drop(['legitimate'], axis=1)


print("Legit binaries")
print(legit_binaries['FileAlignment'].value_counts())
print("Malicious binaries")
print(malicious_binaries['FileAlignment'].value_counts())

#feature selection using extra tree selection
X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
y = data['legitimate'].values
fsel = ske.ExtraTreesClassifier().fit(X, y)
model = SelectFromModel(fsel, prefit=True)
X_new = model.transform(X)

nb_features = X.shape[1]
indices = np.argsort(fsel.feature_importances_)[::-1][:nb_features]

wb = xlwt.Workbook();
wsFeatures = wb.add_sheet("features");
wsFeatures.write(0,0,"Feature");
wsFeatures.write(0,1,"Value");
for f in range(nb_features):
    #print("%d. feature %s (%f)" % (f + 1, data.columns[2+indices[f]], fsel.feature_importances_[indices[f]]));
    wsFeatures.write(f+1, 0, data.columns[2+indices[f]]);
    wsFeatures.write(f+1, 1, fsel.feature_importances_[indices[f]]);


#list of algorithm
algorithms = {
        "SVM": svm.SVC(gamma='scale'),
        "RandomForest": ske.RandomForestClassifier(n_estimators=50),
        #"DecisionTree": tree.DecisionTreeClassifier(max_depth=10),
    }


trainsize=0.5
testsize=0.5
#randomly splitting data training and testing
X_train,X_test,y_train,y_test=train_test_split(X_new,y,train_size=trainsize,test_size=testsize,random_state=100)

print("\nTesting algorithms")
results = {}

subplotid=121
for algo in algorithms:
    print("Algorithms: "+algo)
    clf = algorithms[algo]
    clf.fit(X_train, y_train)
    predictions=clf.predict(X_test);
    countTP=0
    countFP=0
    countTN=0
    countFN=0
    for i in range(len(predictions)):
        if (predictions[i]==1):
            if (y_test[i]==predictions[i]):
                countTP+=1;
            else:
                countFP+=1
        else:
            if (y_test[i]==predictions[i]):
                countTN+=1;
            else:
                countFN+=1
    print("True Positive: "+str(countTP))
    print("False Positive: "+str(countFP))
    print("True Negative: "+str(countTN))
    print("False Positive: "+str(countFN))
    score = clf.score(X_test, y_test)
    print("%s : %f %%" % (algo, score*100));
    wsAlgo = wb.add_sheet(algo);
    wsAlgo.write(0,0, "Class");
    wsAlgo.write(0,1, "Corectly identfied");
    wsAlgo.write(0,2, "Incorectly identified");
    wsAlgo.write(0,3, "Accuracy (%)");

    wsAlgo.write(1,0, "NonMalware");
    wsAlgo.write(1,1, str(countTP));
    wsAlgo.write(1,2, str(countFP));
    wsAlgo.write(1,3, str(100*(countTP/(countTP+countFP))));

    wsAlgo.write(2,0, "Malware");
    wsAlgo.write(2,1, str(countTN));
    wsAlgo.write(2,2, str(countFN));
    wsAlgo.write(2,3, str(100*(countTN/(countTN+countFN))));

    results[algo] = score
    names = ['TP', 'FP', 'TN', 'FN']
    values = [countTP, countFP, countTN, countFN]
    plt.subplot(subplotid)
    plt.title(algo)
    plt.bar(names, values)
    subplotid+=1
    
    
plt.show()
wb.save('result.xls')
print("Report is generate in result.xls")

